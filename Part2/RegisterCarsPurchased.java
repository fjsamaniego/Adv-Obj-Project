import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * RegisterCarsPurchased represents a register of cars that have been sold.
 * It stores a list of sold cars and provides functionality to track
 * and manage these sales.
 */
public class RegisterCarsPurchased 
{
    /**
     *  The list of cars that have been sold.
     */
    private List<Car> carsSold;


    /**
     * Constructs a new RegisterCarsPurchased object with
     * specified list of sold cars.
     * 
     * @param carsSold carsSold The list of cars that have been 
     * sold tracked in the register.
     */
    public RegisterCarsPurchased(List<Car> carsSold)
    {
        this.carsSold = carsSold;
    }

    /**
     * Function to add purchased car to list of cars sold
     * 
     * @param purchasedCarpurchasedCar The car to be added to the list of purchased cars 
     */
    public void addPurchasedCarsByUsers(Car purchasedCar) {
        carsSold.add(purchasedCar);
    }

    /**
     * Calculates and displays the revenue generated by cars with specific car type.
     * 
     * @param characteristic The car type  of the cars for which revenue is to be calculated.
     */
    public void showRevenue(String characteristic)
    {
        
        int numCarsSold = 0;
        double revenue = 0;

        for (Car car : carsSold) {
            if (car.getCarType().equalsIgnoreCase(characteristic)) {
                numCarsSold++;
                revenue += car.getPrice();
            }
        }

        if (numCarsSold == 0) {
            System.out.println("No cars of type " + characteristic + " were sold.");
        } else {
            System.out.println();
            System.out.println("Total number of " + characteristic + " cars sold: " + numCarsSold);
            System.out.println("Total revenue from " + characteristic + " cars: $" + revenue);
        }
        
    }

    /**
     * Calculates and displays the revenue generated by cars with specific ID.
     * 
     * @param characteristic The ID of the cars for which revenue is to be calculated.
     */
    public void showRevenue(int characteristic)
    {
        int numCarsSold = 0;
        double revenue = 0;

        for (Car car : carsSold) {
            if (car.getID() == characteristic) {
                numCarsSold++;
                revenue += car.getPrice();
            }
        }

        if (numCarsSold == 0) {
            System.out.println("No cars with ID " + characteristic + " were sold.");
        } else {
            System.out.println();
            System.out.println("Total number of cars sold with ID " + characteristic + ": " + numCarsSold);
            System.out.println("Total revenue from cars with ID " + characteristic + ": $" + revenue);
        }
    }

}
